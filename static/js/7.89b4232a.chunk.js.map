{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","request","clearError","process","setProcess","useHttp","useState","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformChar","char","id","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","prices","price","getAllCharacters","offset","res","data","results","map","getCharacter","getAllComics","getComic","getCharacterByName","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","AppBanner","avengers","avengersLogo","SinglePage","_ref","dataType","useParams","setData","onDataLoaded","useEffect","updateData","then"],"mappings":"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","file":"static/js/7.89b4232a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\nconst ErrorMessage = () => {\n\treturn (\n\t\t<img\n\t\t\tstyle={{\n\t\t\t\tdisplay: 'block',\n\t\t\t\twidth: '250px',\n\t\t\t\theight: '250px',\n\t\t\t\tobjectFit: 'contain',\n\t\t\t\tmargin: '0 auto',\n\t\t\t}}\n\t\t\tsrc={img}\n\t\t\talt=\"Error\"\n\t\t/>\n\t);\n};\n\nexport default ErrorMessage;\n","import { useHttp } from '../hooks/http.hook';\n\nconst API_KEY_VALUE = process.env.REACT_APP_API_KEY;\n\nconst useMarvelService = () => {\n\tconst { request, clearError, process, setProcess } = useHttp();\n\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n\tconst _apiKey = `apikey=${API_KEY_VALUE}`;\n\tconst _basicOffset = 210;\n\n\tconst getAllCharacters = async (offset = _basicOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformChar);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformChar(res.data.results[0]);\n\t};\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformChar);\n\t};\n\n\tconst _transformChar = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description,\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || 'There is no description',\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: 'No information about the number of pages',\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || 'en-us',\n\t\t\tprices: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: 'not available',\n\t\t};\n\t};\n\n\treturn {\n\t\tclearError,\n\t\tprocess,\n\t\tsetProcess,\n\t\tgetAllCharacters,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t\tgetCharacterByName,\n\t};\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n\tconst [process, setProcess] = useState('waiting');\n\n\tconst request = useCallback(\n\t\tasync (\n\t\t\turl,\n\t\t\tmethod = 'GET',\n\t\t\tbody = null,\n\t\t\theaders = { 'Content-Type': 'application/json' }\n\t\t) => {\n\t\t\tsetProcess('loading');\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers });\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\n\t\t\t\treturn data;\n\t\t\t} catch (e) {\n\t\t\t\tsetProcess('error');\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tconst clearError = useCallback(() => {\n\t\tsetProcess('loading');\n\t}, []);\n\n\treturn { request, clearError, process, setProcess };\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\nimport Spinner from '../components/spinner/Spinner';\n\nconst setContent = (process, Component, data) => {\n\tswitch (process) {\n\t\tcase 'waiting':\n\t\t\treturn <Skeleton />;\n\t\tcase 'loading':\n\t\t\treturn <Spinner />;\n\t\tcase 'confirmed':\n\t\t\treturn <Component data={data} />;\n\t\tcase 'error':\n\t\t\treturn <ErrorMessage />;\n\t\tdefault:\n\t\t\tthrow new Error('Unexpected process state');\n\t}\n};\n\nexport default setContent;\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport AppBanner from '../appBanner/AppBanner';\n\nconst SinglePage = ({ Component, dataType }) => {\n\tconst { id } = useParams();\n\tconst [data, setData] = useState(null);\n\n\tconst { getComic, getCharacter, clearError, process, setProcess } =\n\t\tuseMarvelService();\n\n\tconst onDataLoaded = (data) => {\n\t\tsetData(data);\n\t};\n\n\tconst updateData = () => {\n\t\tclearError();\n\n\t\tswitch (dataType) {\n\t\t\tcase 'comic':\n\t\t\t\tgetComic(id)\n\t\t\t\t\t.then(onDataLoaded)\n\t\t\t\t\t.then(() => setProcess('confirmed'));\n\t\t\t\tbreak;\n\t\t\tcase 'character':\n\t\t\t\tgetCharacter(id)\n\t\t\t\t\t.then(onDataLoaded)\n\t\t\t\t\t.then(() => setProcess('confirmed'));\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tupdateData();\n\t}, [id]);\n\n\treturn (\n\t\t<>\n\t\t\t<AppBanner />\n\t\t\t{setContent(process, Component, data)}\n\t\t</>\n\t);\n};\n\nexport default SinglePage;\n"],"sourceRoot":""}